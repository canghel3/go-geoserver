name: Test and Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgis:
        image: postgis/postgis:17-3.5
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: geoserver
          POSTGRES_PASSWORD: geoserver
          POSTGRES_DB: vectors
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      geoserver:
        image: kartoza/geoserver:2.22.2
        ports:
          - 1112:8080
        env:
          GEOSERVER_ADMIN_USER: admin
          GEOSERVER_ADMIN_PASSWORD: geoserver
          GEOSERVER_DATA_DIR: /opt/geoserver/data
          STABLE_EXTENSIONS: css-plugin

    steps:
      - uses: actions/checkout@v4

      - name: Start services
        run: docker-compose up -d

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install dependencies
        run: go mod download

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:1112/geoserver; do sleep 2; done'
          timeout 30 bash -c 'until pg_isready -h localhost -p 5432 -U geoserver; do sleep 2; done'

      - name: Run tests with coverage
        run: |
          CGO_ENABLED=1 go test -v -race -coverpkg=./... -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.out
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Clean up
        run: docker-compose down