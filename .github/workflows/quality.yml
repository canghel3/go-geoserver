name: Test and Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgis:
        image: postgis/postgis:17-3.5
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: geoserver
          POSTGRES_PASSWORD: geoserver
          POSTGRES_DB: vectors
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      geoserver:
        image: kartoza/geoserver:2.22.2
        ports:
          - 1112:8080
        env:
          GEOSERVER_ADMIN_USER: admin
          GEOSERVER_ADMIN_PASSWORD: geoserver
          GEOSERVER_DATA_DIR: /opt/geoserver/data
          STABLE_EXTENSIONS: css-plugin

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install dependencies
        run: go mod download

      - name: Wait for services to be ready
        run: |
          # Wait for PostgreSQL with timeout
          echo "Waiting for PostgreSQL..."
          timeout=60
          elapsed=0
          until PGPASSWORD=geoserver psql -h localhost -U geoserver -d vectors -c '\q' 2>/dev/null; do
            if [ $elapsed -ge $timeout ]; then
              echo "PostgreSQL failed to start within $timeout seconds"
              exit 1
            fi
            echo "Waiting for PostgreSQL... ($elapsed/$timeout seconds)"
            sleep 2
            elapsed=$((elapsed + 2))
          done
          echo "PostgreSQL is ready!"
          
          # Wait for GeoServer with better debugging
          echo "Waiting for GeoServer to start..."
          timeout=300  # 5 minutes timeout
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            # Check if GeoServer is responding
            if curl -s -f http://localhost:1112/geoserver/rest/about/version.json -u admin:geoserver > /dev/null 2>&1; then
              echo "GeoServer is ready!"
              break
            fi
          
            # Show what's happening
            echo "Waiting for GeoServer... ($elapsed/$timeout seconds)"
            echo "Checking basic connectivity:"
            curl -s -I http://localhost:1112/ || echo "No response from port 1112"
            echo "Checking web interface:"
            curl -s -I http://localhost:1112/geoserver/web/ || echo "GeoServer web not ready"
          
            sleep 5
            elapsed=$((elapsed + 5))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "GeoServer failed to start within $timeout seconds"
            echo "Final connectivity check:"
            curl -v http://localhost:1112/geoserver/web/ || true
            exit 1
          fi
          
          echo "All services are ready!"

      - name: Copy SQL migration file
        run: |
          PGPASSWORD=geoserver psql -h localhost -U geoserver -d vectors -f ./internal/testdata/migrations/table_for_feature.sql

      - name: Run tests with coverage
        run: |
          CGO_ENABLED=1 go test -v -race -coverpkg=./... -coverprofile=coverage.out -covermode=atomic ./...
        env:
          # Set environment variables your tests might need
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: geoserver
          POSTGRES_PASSWORD: geoserver
          POSTGRES_DB: vectors
          GEOSERVER_URL: http://localhost:1112
          GEOSERVER_USER: admin
          GEOSERVER_PASSWORD: geoserver

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.out
          name: codecov-umbrella
          fail_ci_if_error: true